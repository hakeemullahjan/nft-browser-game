// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AttackComplete extends ethereum.Event {
  get params(): AttackComplete__Params {
    return new AttackComplete__Params(this);
  }
}

export class AttackComplete__Params {
  _event: AttackComplete;

  constructor(event: AttackComplete) {
    this._event = event;
  }

  get newBossHp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPlayerHp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AttackCompleted extends ethereum.Event {
  get params(): AttackCompleted__Params {
    return new AttackCompleted__Params(this);
  }
}

export class AttackCompleted__Params {
  _event: AttackCompleted;

  constructor(event: AttackCompleted) {
    this._event = event;
  }

  get newBossHp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPlayerHp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBossPersonnel(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBossTanks(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newBossHelicopter(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newPlayerPersonnel(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get newPlayerTanks(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get newPlayerHelicopter(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class CharacterNFTMinted extends ethereum.Event {
  get params(): CharacterNFTMinted__Params {
    return new CharacterNFTMinted__Params(this);
  }
}

export class CharacterNFTMinted__Params {
  _event: CharacterNFTMinted;

  constructor(event: CharacterNFTMinted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get characterIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WARHEROES__bigBossResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class WARHEROES__checkIfUserHasNFTResultValue0Struct extends ethereum.Tuple {
  get characterIndex(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get hp(): BigInt {
    return this[3].toBigInt();
  }

  get maxHp(): BigInt {
    return this[4].toBigInt();
  }

  get attackDamage(): BigInt {
    return this[5].toBigInt();
  }

  get activePersonnel(): BigInt {
    return this[6].toBigInt();
  }

  get maxActivePersonnel(): BigInt {
    return this[7].toBigInt();
  }

  get tanks(): BigInt {
    return this[8].toBigInt();
  }

  get maxTanks(): BigInt {
    return this[9].toBigInt();
  }

  get helicopters(): BigInt {
    return this[10].toBigInt();
  }

  get maxHelicopters(): BigInt {
    return this[11].toBigInt();
  }
}

export class WARHEROES__getAllDefaultCharactersResultValue0Struct extends ethereum.Tuple {
  get characterIndex(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get hp(): BigInt {
    return this[3].toBigInt();
  }

  get maxHp(): BigInt {
    return this[4].toBigInt();
  }

  get attackDamage(): BigInt {
    return this[5].toBigInt();
  }

  get activePersonnel(): BigInt {
    return this[6].toBigInt();
  }

  get maxActivePersonnel(): BigInt {
    return this[7].toBigInt();
  }

  get tanks(): BigInt {
    return this[8].toBigInt();
  }

  get maxTanks(): BigInt {
    return this[9].toBigInt();
  }

  get helicopters(): BigInt {
    return this[10].toBigInt();
  }

  get maxHelicopters(): BigInt {
    return this[11].toBigInt();
  }
}

export class WARHEROES__getBigBossResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get imageURI(): string {
    return this[1].toString();
  }

  get hp(): BigInt {
    return this[2].toBigInt();
  }

  get maxHp(): BigInt {
    return this[3].toBigInt();
  }

  get attackDamage(): BigInt {
    return this[4].toBigInt();
  }

  get activePersonnel(): BigInt {
    return this[5].toBigInt();
  }

  get maxActivePersonnel(): BigInt {
    return this[6].toBigInt();
  }

  get tanks(): BigInt {
    return this[7].toBigInt();
  }

  get maxTanks(): BigInt {
    return this[8].toBigInt();
  }

  get helicopters(): BigInt {
    return this[9].toBigInt();
  }

  get maxHelicopters(): BigInt {
    return this[10].toBigInt();
  }
}

export class WARHEROES__nftHolderAttributesResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }
}

export class WARHEROES extends ethereum.SmartContract {
  static bind(address: Address): WARHEROES {
    return new WARHEROES("WARHEROES", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bigBoss(): WARHEROES__bigBossResult {
    let result = super.call(
      "bigBoss",
      "bigBoss():(string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new WARHEROES__bigBossResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_bigBoss(): ethereum.CallResult<WARHEROES__bigBossResult> {
    let result = super.tryCall(
      "bigBoss",
      "bigBoss():(string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WARHEROES__bigBossResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  checkIfUserHasNFT(): WARHEROES__checkIfUserHasNFTResultValue0Struct {
    let result = super.call(
      "checkIfUserHasNFT",
      "checkIfUserHasNFT():((uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<WARHEROES__checkIfUserHasNFTResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_checkIfUserHasNFT(): ethereum.CallResult<
    WARHEROES__checkIfUserHasNFTResultValue0Struct
  > {
    let result = super.tryCall(
      "checkIfUserHasNFT",
      "checkIfUserHasNFT():((uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WARHEROES__checkIfUserHasNFTResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAllDefaultCharacters(): Array<
    WARHEROES__getAllDefaultCharactersResultValue0Struct
  > {
    let result = super.call(
      "getAllDefaultCharacters",
      "getAllDefaultCharacters():((uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      WARHEROES__getAllDefaultCharactersResultValue0Struct
    >();
  }

  try_getAllDefaultCharacters(): ethereum.CallResult<
    Array<WARHEROES__getAllDefaultCharactersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllDefaultCharacters",
      "getAllDefaultCharacters():((uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        WARHEROES__getAllDefaultCharactersResultValue0Struct
      >()
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBigBoss(): WARHEROES__getBigBossResultValue0Struct {
    let result = super.call(
      "getBigBoss",
      "getBigBoss():((string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<WARHEROES__getBigBossResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBigBoss(): ethereum.CallResult<
    WARHEROES__getBigBossResultValue0Struct
  > {
    let result = super.tryCall(
      "getBigBoss",
      "getBigBoss():((string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WARHEROES__getBigBossResultValue0Struct>(value[0].toTuple())
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftHolderAttributes(param0: BigInt): WARHEROES__nftHolderAttributesResult {
    let result = super.call(
      "nftHolderAttributes",
      "nftHolderAttributes(uint256):(uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new WARHEROES__nftHolderAttributesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_nftHolderAttributes(
    param0: BigInt
  ): ethereum.CallResult<WARHEROES__nftHolderAttributesResult> {
    let result = super.tryCall(
      "nftHolderAttributes",
      "nftHolderAttributes(uint256):(uint256,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WARHEROES__nftHolderAttributesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  nftHolders(param0: Address): BigInt {
    let result = super.call("nftHolders", "nftHolders(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nftHolders(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftHolders", "nftHolders(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get characterNames(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get characterImageURIs(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get characterHp(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get characterAttackDmg(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get characterActivePersonnel(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get characterTanks(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get characterHelicopters(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get bossName(): string {
    return this._call.inputValues[7].value.toString();
  }

  get bossImageURI(): string {
    return this._call.inputValues[8].value.toString();
  }

  get bossData(): Array<BigInt> {
    return this._call.inputValues[9].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttackBossCall extends ethereum.Call {
  get inputs(): AttackBossCall__Inputs {
    return new AttackBossCall__Inputs(this);
  }

  get outputs(): AttackBossCall__Outputs {
    return new AttackBossCall__Outputs(this);
  }
}

export class AttackBossCall__Inputs {
  _call: AttackBossCall;

  constructor(call: AttackBossCall) {
    this._call = call;
  }
}

export class AttackBossCall__Outputs {
  _call: AttackBossCall;

  constructor(call: AttackBossCall) {
    this._call = call;
  }
}

export class MintCharacterNFTCall extends ethereum.Call {
  get inputs(): MintCharacterNFTCall__Inputs {
    return new MintCharacterNFTCall__Inputs(this);
  }

  get outputs(): MintCharacterNFTCall__Outputs {
    return new MintCharacterNFTCall__Outputs(this);
  }
}

export class MintCharacterNFTCall__Inputs {
  _call: MintCharacterNFTCall;

  constructor(call: MintCharacterNFTCall) {
    this._call = call;
  }

  get _characterIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCharacterNFTCall__Outputs {
  _call: MintCharacterNFTCall;

  constructor(call: MintCharacterNFTCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
