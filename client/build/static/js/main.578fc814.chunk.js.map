{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","console","log","name","imageURI","hp","toNumber","maxHp","attackDamage","activePersonnel","maxActivePersonnel","tanks","maxTanks","helicopters","maxHelicopters","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myNFTGame","abi","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","alert","warn","style","color","length","character","index","src","alt","type","onClick","Arena","currentAccount","boss","setBoss","attackState","setAttackState","showToast","setShowToast","userNftTokenId","setUserNftTokenId","fetchBoss","getBigBoss","bossTxn","nftHolders","nftTokenId","onAttackComplete","newBossHp","newPlayerHp","newBossPersonnel","newBossTanks","newBossHelicopter","newPlayerPersonnel","newPlayerTanks","newPlayerHelicopter","bossHp","playerHp","bossPersonnel","bossTanks","bossHelicopter","playerPersonnel","playerTanks","playerHelicopter","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","backgroundColor","href","target","TWITTER_HANDLE","TWITTER_LINK","App","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.578fc814.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","// const CONTRACT_ADDRESS = \"0xa11Cbaebe20e93FB307cC6d477abF131CFbCf3b6\";\nconst CONTRACT_ADDRESS = \"0x4CAc4AFCc5A9751098877372570013236C68d713\";\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  console.log(\"characterData11\", characterData);\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n    activePersonnel: characterData.activePersonnel.toNumber(),\n    maxActivePersonnel: characterData.maxActivePersonnel.toNumber(),\n    tanks: characterData.tanks.toNumber(),\n    maxTanks: characterData.maxTanks.toNumber(),\n    helicopters: characterData.helicopters.toNumber(),\n    maxHelicopters: characterData.maxHelicopters.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport myNFTGame from \"../../utils/MyNFTGame.json\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myNFTGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img\n          src={`http://cloudflare-ipfs.com/ipfs/${character.imageURI}`}\n          alt={character.name}\n        />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={() => mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  // Actions\n  const mintCharacterNFTAction = async (characterId) => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n        alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${characterId.toNumber()}`)\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      setMintingCharacter(false);\n    }\n  };\n\n  return (\n    <div className=\"select-character-container\">\n      <h2 style={{ color: \"red\" }}>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport myNFTGame from \"../../utils/MyNFTGame.json\";\n\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT, currentAccount }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n  const [userNftTokenId, setUserNftTokenId] = useState(0);\n\n  console.log(\"characterNFT: Holders23232\", characterNFT);\n\n  // UseEffects\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn, transformCharacterData(bossTxn));\n      setBoss(transformCharacterData(bossTxn));\n\n      const nftTokenId = await gameContract.nftHolders(currentAccount);\n      console.log(\"NFT Token ID:\", nftTokenId.toNumber());\n      setUserNftTokenId(nftTokenId.toNumber());\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (\n      newBossHp,\n      newPlayerHp,\n      newBossPersonnel,\n      newBossTanks,\n      newBossHelicopter,\n      newPlayerPersonnel,\n      newPlayerTanks,\n      newPlayerHelicopter\n    ) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      const bossPersonnel = newBossPersonnel.toNumber();\n      const bossTanks = newBossTanks.toNumber();\n      const bossHelicopter = newBossHelicopter.toNumber();\n      const playerPersonnel = newPlayerPersonnel.toNumber();\n      const playerTanks = newPlayerTanks.toNumber();\n      const playerHelicopter = newPlayerHelicopter.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return {\n          ...prevState,\n          hp: bossHp,\n          activePersonnel: bossPersonnel,\n          tanks: bossTanks,\n          helicopters: bossHelicopter,\n        };\n      });\n\n      setCharacterNFT((prevState) => {\n        return {\n          ...prevState,\n          hp: playerHp,\n          activePersonnel: playerPersonnel,\n          tanks: playerTanks,\n          helicopters: playerHelicopter,\n        };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackCompleted\", onAttackComplete);\n    }\n\n    /*\n     * Make sure to clean up this event when this component is removed\n     */\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackCompleted\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myNFTGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  // Actions\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img\n                src={`http://cloudflare-ipfs.com/ipfs/${boss.imageURI}`}\n                alt={`Boss ${boss.name}`}\n              />\n              {/* <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div> */}\n              <div>\n                <h3>{`Active Personnel ${boss.activePersonnel} of ${boss.maxActivePersonnel}`}</h3>\n                <h3>{`Tanks ${boss.tanks} of ${boss.maxTanks}`}</h3>\n                <h3>{`Helicopters ${boss.helicopters} of ${boss.maxHelicopters}`}</h3>\n                <h3>{`HP ${boss.hp} of ${boss.maxHp}`}</h3>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {/* Add this right under your attack button */}\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Replace your Character UI with this */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2 style={{ color: \"blue\", backgroundColor: \"yellow\" }}>\n              Your Character\n            </h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={`http://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                {/* <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div> */}\n                <div>\n                  <a\n                    href={`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${userNftTokenId}`}\n                    target=\"_blank\"\n                  >\n                    View on Opensea\n                  </a>\n                  <h3>{`Active Personnel ${characterNFT.activePersonnel} of ${characterNFT.maxActivePersonnel}`}</h3>\n                  <h3>{`Tanks ${characterNFT.tanks} of ${characterNFT.maxTanks}`}</h3>\n                  <h3>{`Helicopters ${characterNFT.helicopters} of ${characterNFT.maxHelicopters}`}</h3>\n                  <h3>{`HP ${characterNFT.hp} of ${characterNFT.maxHp}`}</h3>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport myNFTGame from \"./utils/MyNFTGame.json\";\nimport { ethers } from \"ethers\";\nimport Arena from \"./Components/Arena\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\n// Constants\nconst TWITTER_HANDLE = \"hakeemullahjan_\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://giffiles.alphacoders.com/910/91006.gif\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n      /*\n       * If there is a connected wallet and characterNFT, it's time to battle!\n       */\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena\n          characterNFT={characterNFT}\n          setCharacterNFT={setCharacterNFT}\n          currentAccount={currentAccount}\n        />\n      );\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        setIsLoading(false);\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  };\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Please connect to Rinkeby!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n    // checkNetwork();\n  }, []);\n\n  /*\n   * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n   */\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myNFTGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n    setIsLoading(false);\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Ukraine!</p>\n          <div className=\"connect-wallet-container\">{renderContent()}</div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}